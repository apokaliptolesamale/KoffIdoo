// To parse this JSON data, do
//
//     final userModel = userModelFromJson(jsonString);

// ignore_for_file: overridden_fields, empty_catches

import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';

import '../../../../../app/core/interfaces/entity_model.dart';
import '../../../../../app/core/services/logger_service.dart';
import '../../../../core/design/color.dart';
import '../entities/decoration.dart' as dec;

DecorationList decorationsListModelFromJson(String str) =>
    DecorationList.fromJson(json.decode(str));

DecorationModel decorationsModelFromJson(String str) =>
    DecorationModel.fromJson(json.decode(str));

String decorationsModelToJson(DecorationModel data) =>
    json.encode(data.toJson());

class DecorationList<T extends DecorationModel> implements EntityModelList<T> {
  final List<T> decorations;

  DecorationList({
    required this.decorations,
  });

  factory DecorationList.fromJson(Map<String, dynamic> json) => DecorationList(
        decorations: List<T>.from(
            json["decorations"].map((x) => DecorationModel.fromJson(x))),
      );

  factory DecorationList.fromStringJson(String strJson) => DecorationList(
        decorations: List<T>.from(json
            .decode(strJson)["decorations"]
            .map((x) => DecorationModel.fromJson(x))),
      );

  @override
  int get getTotal => getList().length;

  @override
  EntityModelList<T> add(T element) => fromList([element]);

  @override
  EntityModelList<T> fromJson(Map<String, dynamic> json) {
    return DecorationList.fromJson(json);
  }

  @override
  EntityModelList<T> fromList(List<T> list) {
    for (var element in list) {
      if (!decorations.contains(element)) decorations.add(element);
    }
    return this;
  }

  @override
  EntityModelList<T> fromStringJson(String strJson) {
    return DecorationList.fromStringJson(strJson);
  }

  @override
  List<T> getList() => decorations;

  Map<String, dynamic> toJson() => {
        "decorations": List<dynamic>.from(decorations.map((x) => x.toJson())),
      };
}

class DecorationModel extends dec.Decoration implements EntityModel {
  //method generated by wizard

  T cloneWith<T extends EntityModel>(T other) {
    return DecorationModel.fromJson(other.toJson()) as T;
  }

  T fromJson<T extends EntityModel>(Map<String, dynamic> params) {
    return DecorationModel.fromJson(params) as T;
  }

  List<Object?> get props => [];

  bool? get stringify => true;
  @override
  String name;
  @override
  Color color;
  @override
  double opacityColor;
  @override
  double hoverOpacityColor;
  @override
  String borderRadius;
  @override
  String borderRadiusType;

  @override
  Map<String, ColumnMetaModel>? metaModel;

  DecorationModel({
    required this.name,
    required this.color,
    required this.opacityColor,
    required this.hoverOpacityColor,
    this.borderRadius = "",
    this.borderRadiusType = "",
  }) : super(
          name: name,
          color: color,
          opacityColor: opacityColor,
          hoverOpacityColor: hoverOpacityColor,
          borderRadius: borderRadius,
          borderRadiusType: borderRadiusType,
        );

  factory DecorationModel.fromJson(Map<String, dynamic> json) =>
      DecorationModel(
        name: json["name"],
        color: CustomColor.fromString(json["color"]
            .toString()
            .replaceAll("Color(", "")
            .replaceAll(")", "")),
        opacityColor:
            json.containsKey("opacityColor") ? json["opacityColor"] : 0.0,
        hoverOpacityColor: json.containsKey("hoverOpacityColor")
            ? json["hoverOpacityColor"]
            : 0.0,
        borderRadius: json.containsKey("borderRadius")
            ? json["borderRadius"].toString()
            : "", //TODO validar el radio y asignarlo a la decoración de acuerdo al valor
        borderRadiusType: json.containsKey("borderRadiusType")
            ? json["borderRadiusType"]
            : "",
      );

  @override
  Map<String, ColumnMetaModel>? get getMetaModel => getColumnMetaModel();

  @override
  set setMetaModel(Map<String, ColumnMetaModel> newMetaModel) {
    metaModel = newMetaModel;
  }

  @override
  EntityModelList createModelListFrom(dynamic data) {
    try {
      if (data is Map) {
        return DecorationList.fromJson(data as Map<String, dynamic>);
      }
      if (data is String) {
        return DecorationList.fromStringJson(data);
      }
    } on Exception {
      log("Error al mapear el parámetro 'data'. Debe ser de tipo'Map<String, dynamic>' o String");
    }
    return DecorationList.fromJson({});
  }

  @override
  Map<String, ColumnMetaModel> getColumnMetaModel() {
    // TODO: implement getColumnMetaModel
    throw UnimplementedError();
  }

  @override
  Map<String, String> getColumnNames() {
    return {"id_config": "ID"};
  }

  @override
  List<String> getColumnNamesList() {
    return getColumnNames().values.toList();
  }

  StreamController<EntityModel> getController({
    void Function()? onListen,
    void Function()? onPause,
    void Function()? onResume,
    FutureOr<void> Function()? onCancel,
  }) {
    return EntityModel.getController(
      entity: this,
      onListen: onListen,
      onPause: onPause,
      onResume: onResume,
      onCancel: onCancel,
    );
  }

  @override
  Map<K1, V1> getMeta<K1, V1>(String searchKey, dynamic searchValue) {
    final Map<K1, V1> result = {};
    getColumnMetaModel().map<K1, V1>((key, value) {
      MapEntry<K1, V1> el = MapEntry(value.getDataIndex() as K1, value as V1);
      if (value[searchKey] == searchValue) {
        result.putIfAbsent(value.getDataIndex() as K1, () {
          return value as V1;
        });
      }
      return el;
    });
    return result;
  }

  @override
  Map<String, String> getVisibleColumnNames() {
    // TODO: implement getVisibleColumnNames
    throw UnimplementedError();
  }

  @override
  Map<String, dynamic> toJson() => {
        "name": name,
        "color": color.toHex(),
        "opacityColor": opacityColor,
        "hoverOpacityColor": hoverOpacityColor,
        "borderRadius": borderRadius,
        "borderRadiusType": borderRadiusType,
      };

  @override
  Map<String, ColumnMetaModel> updateColumnMetaModel(
      String keySearch, dynamic valueSearch, dynamic newValue) {
    Map<String, ColumnMetaModel> tmp = getColumnMetaModel();
    getMeta<String, ColumnMetaModel>(keySearch, valueSearch)
        .map<String, ColumnMetaModel>((key, value) {
      tmp.putIfAbsent(key, () => value);
      return MapEntry(key, value);
    });
    return metaModel = tmp;
  }

  static T? getValueFrom<T>(
      String key, Map<dynamic, dynamic> json, T? defaultValue,
      {JsonReader<T?>? reader}) {
    return EntityModel.getValueFromJson<T?>(key, json, defaultValue,
        reader: reader);
  }
}
