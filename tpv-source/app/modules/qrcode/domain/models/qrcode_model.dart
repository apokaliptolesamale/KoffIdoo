// To parse this JSON data, do
//
//     final userModel = userModelFromJson(jsonString);
// ignore_for_file: overridden_fields, empty_catches

import 'dart:async';
import 'dart:convert';

import '/app/core/services/logger_service.dart';
import '../../../../core/interfaces/entity_model.dart';
import '../entities/qrcode.dart';

QrCodeList qrcodeListModelFromJson(String str) =>
    QrCodeList.fromJson(json.decode(str));

QrCodeModel qrcodeModelFromJson(String str) =>
    QrCodeModel.fromJson(json.decode(str));

String qrcodeModelToJson(QrCodeModel data) => json.encode(data.toJson());

class QrCodeList<T extends QrCodeModel> implements EntityModelList<T> {
  final List<T> qrcodes;

  QrCodeList({
    required this.qrcodes,
  });

  factory QrCodeList.fromJson(Map<String, dynamic> json) => QrCodeList(
        qrcodes:
            List<T>.from(json["qrcodes"].map((x) => QrCodeModel.fromJson(x))),
      );

  factory QrCodeList.fromStringJson(String strJson) => QrCodeList(
        qrcodes: List<T>.from(json
            .decode(strJson)["qrcodes"]
            .map((x) => QrCodeModel.fromJson(x))),
      );

  @override
  int get getTotal => getList().length;

  @override
  EntityModelList<T> add(T element) => fromList([element]);

  @override
  EntityModelList<T> fromJson(Map<String, dynamic> json) {
    return QrCodeList.fromJson(json);
  }

  @override
  EntityModelList<T> fromList(List<T> list) {
    for (var element in list) {
      if (!qrcodes.contains(element)) qrcodes.add(element);
    }
    return this;
  }

  @override
  EntityModelList<T> fromStringJson(String strJson) {
    return QrCodeList.fromStringJson(strJson);
  }

  @override
  List<T> getList() => qrcodes;

  Map<String, dynamic> toJson() => {
        "qrcodes": List<dynamic>.from(qrcodes.map((x) => x.toJson())),
      };
}

class QrCodeModel extends QrCode implements EntityModel {
  //method generated by wizard
  @override
  T cloneWith<T extends EntityModel>(T other) {
    return QrCodeModel.fromJson(other.toJson()) as T;
  }

  @override
  T fromJson<T extends EntityModel>(Map<String, dynamic> params) {
    return QrCodeModel.fromJson(params) as T;
  }

  @override
  List<Object?> get props => [];

  @override
  bool? get stringify => true;
  @override
  String? uuid, userName, information;
  @override
  final DateTime? expirationDate;
  @override
  final int cheekCount;

  @override
  Map<String, ColumnMetaModel>? metaModel;

  QrCodeModel({
    required this.userName,
    this.uuid,
    required this.information,
    this.expirationDate,
    this.cheekCount = 0,
  }) : super(
          uuid: uuid,
          information: information,
          userName: userName,
          cheekCount: cheekCount,
          expirationDate: expirationDate,
        );

  factory QrCodeModel.fromJson(Map<String, dynamic> params) => QrCodeModel(
        uuid: params.containsKey("uuid") ? params["uuid"] : null,
        information:
            params.containsKey("information") ? params["information"] : null,
        userName: params.containsKey("userName") ? params["userName"] : null,
        cheekCount: params.containsKey("cheekCount") ? params["cheekCount"] : 0,
        expirationDate: params.containsKey("uuexpirationDateid")
            ? params["expirationDate"]
            : null,
      );

  @override
  Map<String, ColumnMetaModel>? get getMetaModel => getColumnMetaModel();

  @override
  set setMetaModel(Map<String, ColumnMetaModel> newMetaModel) {
    metaModel = newMetaModel;
  }

  @override
  EntityModelList createModelListFrom(dynamic data) {
    try {
      if (data is Map) {
        return QrCodeList.fromJson(data as Map<String, dynamic>);
      }
      if (data is String) {
        return QrCodeList.fromStringJson(data);
      }
    } on Exception {
      log("Error al mapear el par√°metro 'data'. Debe ser de tipo'Map<String, dynamic>' o String");
    }
    return QrCodeList.fromJson({});
  }

  @override
  Map<String, ColumnMetaModel> getColumnMetaModel() {
    Map<String, String> colNames = getColumnNames();
    metaModel = metaModel ??
        {
          //TODO Declare here all ColumnMetaModel. you can use class implementation of class "DefaultColumnMetaModel".
        };
    int index = 0;
    metaModel!.forEach((key, value) {
      value.setColumnIndex(index++);
    });
    return metaModel!;
  }

  @override
  Map<String, String> getColumnNames() {
    return {"id_qrcode": "ID"};
  }

  @override
  List<String> getColumnNamesList() {
    return getColumnNames().values.toList();
  }

  StreamController<EntityModel> getController({
    void Function()? onListen,
    void Function()? onPause,
    void Function()? onResume,
    FutureOr<void> Function()? onCancel,
  }) {
    return EntityModel.getController(
      entity: this,
      onListen: onListen,
      onPause: onPause,
      onResume: onResume,
      onCancel: onCancel,
    );
  }

  String getImageUrlService() {
    return uuid != null ? "qr/searchQr?uuid=$uuid" : "";
  }

  @override
  Map<K1, V1> getMeta<K1, V1>(String searchKey, dynamic searchValue) {
    final Map<K1, V1> result = {};
    getColumnMetaModel().map<K1, V1>((key, value) {
      MapEntry<K1, V1> el = MapEntry(value.getDataIndex() as K1, value as V1);
      if (value[searchKey] == searchValue) {
        result.putIfAbsent(value.getDataIndex() as K1, () {
          return value as V1;
        });
      }
      return el;
    });
    return result;
  }

  @override
  Map<String, String> getVisibleColumnNames() {
    Map<String, String> names = {};
    getMeta<String, ColumnMetaModel>("visible", true)
        .map<String, String>((key, value) {
      names.putIfAbsent(key, () => value.getColumnName());
      return MapEntry(key, value.getColumnName());
    });
    return names;
    // throw UnimplementedError();
  }

  @override
  Map<String, dynamic> toJson() => {
        "uuid": uuid,
        "information": information,
        "userName": userName,
        "cheekCount": cheekCount,
        "expirationDate": expirationDate
      };

  @override
  Map<String, ColumnMetaModel> updateColumnMetaModel(
      String keySearch, dynamic valueSearch, dynamic newValue) {
    Map<String, ColumnMetaModel> tmp = getColumnMetaModel();
    getMeta<String, ColumnMetaModel>(keySearch, valueSearch)
        .map<String, ColumnMetaModel>((key, value) {
      tmp.putIfAbsent(key, () => value);
      return MapEntry(key, value);
    });
    return metaModel = tmp;
  }

  static T? getValueFrom<T>(
      String key, Map<dynamic, dynamic> json, T? defaultValue,
      {JsonReader<T?>? reader}) {
    return EntityModel.getValueFromJson<T?>(key, json, defaultValue,
        reader: reader);
  }
}
