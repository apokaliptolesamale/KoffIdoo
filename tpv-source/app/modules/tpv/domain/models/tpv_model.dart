// To parse this JSON data, do
//
//     final userModel = userModelFromJson(jsonString);
// ignore_for_file: overridden_fields, empty_catches, override_on_non_overriding_member
import 'dart:async';
import 'dart:convert';
import 'dart:developer';

import 'package:xml/xml.dart';

import '../../../../core/interfaces/entity_model.dart';
import '../entities/tpv.dart';

TpvList tpvListModelFromJson(String str) => TpvList.fromJson(json.decode(str));

TpvModel tpvModelFromJson(String str) => TpvModel.fromJson(json.decode(str));

String tpvModelToJson(TpvModel data) => json.encode(data.toJson());

class TpvList<T extends TpvModel> implements EntityModelList<T> {
  final List<T> tpvs;

  TpvList({
    required this.tpvs,
  });

  factory TpvList.fromJson(Map<String, dynamic> json) => TpvList(
        tpvs: List<T>.from(json["tpvs"].map((x) => TpvModel.fromJson(x))),
      );

  factory TpvList.fromStringJson(String strJson) =>
      TpvList.fromJson(json.decode(strJson));

  @override
  int get getTotal => getList().length;

  @override
  EntityModelList<T> add(T element) => fromList([element]);

  @override
  EntityModelList<T> fromJson(Map<String, dynamic> json) {
    return TpvList.fromJson(json);
  }

  @override
  EntityModelList<T> fromList(List<T> list) {
    for (var element in list) {
      if (!tpvs.contains(element)) tpvs.add(element);
    }
    return this;
  }

  @override
  EntityModelList<T> fromStringJson(String strJson) {
    return TpvList.fromStringJson(strJson);
  }

  @override
  List<T> getList() => tpvs;

  Map<String, dynamic> toJson() => {
        "tpvs": List<dynamic>.from(tpvs.map((x) => x.toJson())),
      };

  static Future<T> fromXmlServiceUrl<T>(
      String url,
      String parentTagName,
      Future<T> Function(XmlDocument doc, XmlElement el) process,
      Future<T> Function() onError) async {
    return EntityModelList.fromXmlServiceUrl(
        url, parentTagName, process, onError);
  }

  static Future<T> getJsonFromXMLUrl<T>(
      String url,
      Future<T> Function(XmlDocument result) process,
      Future<T> Function() onError) async {
    return EntityModelList.getJsonFromXMLUrl(url, process, onError);
  }
}

class TpvModel extends Tpv implements EntityModel {
  @override
  final String uuid;
  @override
  final String id;
  @override
  final String imei;
  @override
  final String marca;
  @override
  final String modelo;
  @override
  final String type;
  @override
  final String comercio;
  @override
  final String status;
  @override
  Map<String, ColumnMetaModel>? metaModel;

  TpvModel({
    this.uuid = "",
    this.id = "",
    this.imei = "",
    this.marca = "",
    this.modelo = "",
    this.type = "",
    this.comercio = "",
    this.status = "",
  }) : super(
          id: id,
          imei: imei,
          marca: marca,
          modelo: modelo,
          type: type,
          comercio: comercio,
          status: status,
        );

  factory TpvModel.fromJson(Map<String, dynamic> json) => TpvModel(
        id: getValueFrom("id", json, ""),
        imei: getValueFrom("imei", json, ""),
        marca: getValueFrom("marca", json, ""),
        modelo: getValueFrom("modelo", json, ""),
        type: getValueFrom("type", json, ""),
        comercio: getValueFrom("comercio", json, ""),
        status: getValueFrom("status", json, ""),
      );

  factory TpvModel.fromXml(
          XmlElement element, TpvModel Function(XmlElement el) process) =>
      process(element);

  @override
  Map<String, ColumnMetaModel>? get getMetaModel => getColumnMetaModel();

  List<Object?> get props => [];

  @override
  set setMetaModel(Map<String, ColumnMetaModel> newMetaModel) {
    metaModel = newMetaModel;
  }

  bool? get stringify => true;

  //method generated by wizard
  @override
  T cloneWith<T extends EntityModel>(T other) {
    return TpvModel.fromJson(other.toJson()) as T;
  }

  @override
  EntityModelList createModelListFrom(dynamic data) {
    try {
      if (data is Map) {
        return TpvList.fromJson(data as Map<String, dynamic>);
      }
      if (data is String) {
        return TpvList.fromStringJson(data);
      }
    } on Exception {
      log("Error al mapear el par√°metro 'data'. Debe ser de tipo'Map<String, dynamic>' o String");
    }
    return TpvList.fromJson({});
  }

  @override
  T fromJson<T extends EntityModel>(Map<String, dynamic> params) {
    return TpvModel.fromJson(params) as T;
  }

  @override
  Map<String, ColumnMetaModel> getColumnMetaModel() {
    //Map<String, String> colNames = getColumnNames();
    metaModel = metaModel ??
        {
          //TODO Declare here all ColumnMetaModel. you can use class implementation of class "DefaultColumnMetaModel".
        };
    int index = 0;
    metaModel!.forEach((key, value) {
      value.setColumnIndex(index++);
    });
    return metaModel!;
  }

  @override
  Map<String, String> getColumnNames() {
    return {"id_tpv": "ID"};
  }

  @override
  List<String> getColumnNamesList() {
    return getColumnNames().values.toList();
  }

  StreamController<EntityModel> getController({
    void Function()? onListen,
    void Function()? onPause,
    void Function()? onResume,
    FutureOr<void> Function()? onCancel,
  }) {
    return EntityModel.getController(
        entity: this,
        onListen: onListen,
        onPause: onPause,
        onResume: onResume,
        onCancel: onCancel);
  }

  @override
  Map<K1, V1> getMeta<K1, V1>(String searchKey, dynamic searchValue) {
    final Map<K1, V1> result = {};
    getColumnMetaModel().map<K1, V1>((key, value) {
      MapEntry<K1, V1> el = MapEntry(value.getDataIndex() as K1, value as V1);
      if (value[searchKey] == searchValue) {
        result.putIfAbsent(value.getDataIndex() as K1, () {
          return value as V1;
        });
      }
      return el;
    });
    return result;
  }

  @override
  Map<String, String> getVisibleColumnNames() {
    Map<String, String> names = {};
    getMeta<String, ColumnMetaModel>("visible", true)
        .map<String, String>((key, value) {
      names.putIfAbsent(key, () => value.getColumnName());
      return MapEntry(key, value.getColumnName());
    });
    return names;
    // throw UnimplementedError();
  }

  @override
  Map<String, dynamic> toJson() => {
        id: id,
        imei: imei,
        marca: marca,
        modelo: modelo,
        type: type,
        comercio: comercio,
        status: status,
      };

  @override
  Map<String, ColumnMetaModel> updateColumnMetaModel(
      String keySearch, dynamic valueSearch, dynamic newValue) {
    Map<String, ColumnMetaModel> tmp = getColumnMetaModel();
    getMeta<String, ColumnMetaModel>(keySearch, valueSearch)
        .map<String, ColumnMetaModel>((key, value) {
      tmp.putIfAbsent(key, () => value);
      return MapEntry(key, value);
    });
    return metaModel = tmp;
  }

  @override
  static T getValueFrom<T>(
      String key, Map<dynamic, dynamic> json, T defaultValue,
      {JsonReader<T>? reader}) {
    return EntityModel.getValueFromJson<T>(key, json, defaultValue,
        reader: reader);
  }
}
