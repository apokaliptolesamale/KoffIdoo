// To parse this JSON data, do
//
//     final userModel = userModelFromJson(jsonString);
// ignore_for_file: overridden_fields, empty_catches, override_on_non_overriding_member
import 'dart:async';
import 'dart:convert';
import 'dart:developer';

import 'package:json_annotation/json_annotation.dart';
import 'package:xml/xml.dart';

import '../../../../../app/core/interfaces/entity_model.dart';
import '../entities/categoryGift.dart';

CategoryList categoryistModelFromJson(String str) =>
    CategoryList.fromJson(json.decode(str));

CategoryGiftModel categoryModelFromJson(String str) =>
    CategoryGiftModel.fromJson(json.decode(str));

String categoryModelToJson(CategoryGiftModel data) =>
    json.encode(data.toJson());

@JsonSerializable()
class CategoryGiftModel extends CategoryGift implements EntityModel {
  @override
  final String uuid;

  @override
  final String denom;

  @override
  final String description;

  @override
  final bool status;
  @override
  final String avatar;

  @override
  Map<String, ColumnMetaModel>? metaModel;

  CategoryGiftModel({
    required this.uuid,
    required this.denom,
    required this.description,
    required this.status,
    required this.avatar,
  }) : super(
            avatar: avatar,
            uuid: uuid,
            denom: denom,
            description: description,
            status: status);

  factory CategoryGiftModel.fromJson(Map<String, dynamic> json) =>
      CategoryGiftModel(
        uuid: json.containsKey("uuid") && json["uuid"] != null
            ? json["uuid"]
            : '',
        denom: json.containsKey("denom") && json["denom"] != null
            ? json["denom"]
            : '',
        description:
            json.containsKey("description") && json["description"] != null
                ? json["description"]
                : '',
        avatar: json.containsKey("avatar") && json["avatar"] != null
            ? json["avatar"]
            : '',
        status: json.containsKey("status") && json["status"] != null
            ? json["status"]
            : '',
      );
  factory CategoryGiftModel.fromXml(XmlElement element,
          CategoryGiftModel Function(XmlElement el) process) =>
      process(element);

  @override
  Map<String, ColumnMetaModel>? get getMetaModel => getColumnMetaModel();

  @override
  List<Object?> get props => [];

  @override
  set setMetaModel(Map<String, ColumnMetaModel> newMetaModel) {
    metaModel = newMetaModel;
  }

  @override
  bool? get stringify => true;

  //method generated by wizard
  @override
  T cloneWith<T extends EntityModel>(T other) {
    return CategoryGiftModel.fromJson(other.toJson()) as T;
  }

  @override
  EntityModelList createModelListFrom(dynamic data) {
    try {
      if (data is Map) {
        return CategoryList.fromJson(data as Map<String, dynamic>);
      }
      if (data is String) {
        return CategoryList.fromStringJson(data);
      }
    } on Exception {
      log("Error al mapear el par√°metro 'data'. Debe ser de tipo'Map<String, dynamic>' o String");
    }
    return CategoryList.fromJson({});
  }

  @override
  T fromJson<T extends EntityModel>(Map<String, dynamic> params) {
    return CategoryGiftModel.fromJson(params) as T;
  }

  @override
  Map<String, ColumnMetaModel> getColumnMetaModel() {
    //Map<String, String> colNames = getColumnNames();
    metaModel = metaModel ??
        {
          //TODO Declare here all ColumnMetaModel. you can use class implementation of class "DefaultColumnMetaModel".
        };
    int index = 0;
    metaModel!.forEach((key, value) {
      value.setColumnIndex(index++);
    });
    return metaModel!;
  }

  @override
  Map<String, String> getColumnNames() {
    return {"name": "ID"};
  }

  @override
  List<String> getColumnNamesList() {
    return getColumnNames().values.toList();
  }

  StreamController<EntityModel> getController({
    void Function()? onListen,
    void Function()? onPause,
    void Function()? onResume,
    FutureOr<void> Function()? onCancel,
  }) {
    return EntityModel.getController(
        entity: this,
        onListen: onListen,
        onPause: onPause,
        onResume: onResume,
        onCancel: onCancel);
  }

  @override
  Map<K1, V1> getMeta<K1, V1>(String searchKey, dynamic searchValue) {
    final Map<K1, V1> result = {};
    getColumnMetaModel().map<K1, V1>((key, value) {
      MapEntry<K1, V1> el = MapEntry(value.getDataIndex() as K1, value as V1);
      if (value[searchKey] == searchValue) {
        result.putIfAbsent(value.getDataIndex() as K1, () {
          return value as V1;
        });
      }
      return el;
    });
    return result;
  }

  @override
  Map<String, String> getVisibleColumnNames() {
    Map<String, String> names = {};
    getMeta<String, ColumnMetaModel>("visible", true)
        .map<String, String>((key, value) {
      names.putIfAbsent(key, () => value.getColumnName());
      return MapEntry(key, value.getColumnName());
    });
    return names;
    // throw UnimplementedError();
  }

  @override
  Map<String, dynamic> toJson() => {
        "uuid": uuid,
        "denom": denom,
        "description": description,
        "status": status,
      };

  @override
  Map<String, ColumnMetaModel> updateColumnMetaModel(
      String keySearch, dynamic valueSearch, dynamic newValue) {
    Map<String, ColumnMetaModel> tmp = getColumnMetaModel();
    getMeta<String, ColumnMetaModel>(keySearch, valueSearch)
        .map<String, ColumnMetaModel>((key, value) {
      tmp.putIfAbsent(key, () => value);
      return MapEntry(key, value);
    });
    return metaModel = tmp;
  }

  @override
  static T getValueFrom<T>(
      String key, Map<dynamic, dynamic> json, T defaultValue,
      {JsonReader<T>? reader}) {
    return EntityModel.getValueFromJson<T>(key, json, defaultValue,
        reader: reader);
  }
}

class CategoryList<T extends CategoryGiftModel> implements EntityModelList<T> {
  final List<T> categoryList;

  CategoryList({
    required this.categoryList,
  });

  factory CategoryList.fromJson(Map<String, dynamic> json) => CategoryList(
        categoryList: List<T>.from(
            json["category"].map((x) => CategoryGiftModel.fromJson(x))),
      );

  factory CategoryList.fromStringJson(String strJson) =>
      CategoryList.fromJson(json.decode(strJson));

  @override
  int get getTotal => getList().length;

  @override
  EntityModelList<T> add(T element) => fromList([element]);

  @override
  EntityModelList<T> fromJson(Map<String, dynamic> json) {
    return CategoryList.fromJson(json);
  }

  @override
  EntityModelList<T> fromList(List<T> list) {
    for (var element in list) {
      if (!categoryList.contains(element)) categoryList.add(element);
    }
    return this;
  }

  @override
  EntityModelList<T> fromStringJson(String strJson) {
    return CategoryList.fromStringJson(strJson);
  }

  @override
  List<T> getList() => categoryList;

  Map<String, dynamic> toJson() => {
        "category": List<dynamic>.from(categoryList.map((x) => x.toJson())),
      };

  static Future<T> fromXmlServiceUrl<T>(
      String url,
      String parentTagName,
      Future<T> Function(XmlDocument doc, XmlElement el) process,
      Future<T> Function() onError) async {
    return EntityModelList.fromXmlServiceUrl(
        url, parentTagName, process, onError);
  }

  static Future<T> getJsonFromXMLUrl<T>(
      String url,
      Future<T> Function(XmlDocument result) process,
      Future<T> Function() onError) async {
    return EntityModelList.getJsonFromXMLUrl(url, process, onError);
  }
}
